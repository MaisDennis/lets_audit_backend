// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------------------------------
model CommentsOnUsers {
  created_at DateTime @default(now())

  id_comment String
  comment    Comments @relation(name: "comment_on_user", fields: [id_comment], references: [id], onDelete: Cascade)

  id_user String
  like    Users  @relation(name: "comment_on_user", fields: [id_user], references: [id], onDelete: Cascade)

  @@id([id_comment, id_user])
  @@map("_comments_on_users")
}

// -----------------------------------------------------------------------------
model RelevancesOnUsers {
  created_at DateTime @default(now())

  id_proposal String
  proposal    Proposals @relation(name: "relevance_on_user", fields: [id_proposal], references: [id], onDelete: Cascade)

  id_user   String
  relevance Users  @relation(name: "relevance_on_user", fields: [id_user], references: [id], onDelete: Cascade)

  @@id([id_proposal, id_user])
  @@map("_relevances_on_users")
}
// -----------------------------------------------------------------------------
model TestsOnUsers {
  created_at DateTime @default(now())

  id_proposal String
  proposal    Proposals @relation(name: "test_on_user", fields: [id_proposal], references: [id], onDelete: Cascade)

  id_user   String
  test Users  @relation(name: "test_on_user", fields: [id_user], references: [id], onDelete: Cascade)

  @@id([id_proposal, id_user])
  @@map("_tests_on_users")
}

// -----------------------------------------------------------------------------
model UpvotesOnUsers {
  created_at DateTime @default(now())

  id_proposal String
  proposal    Proposals @relation(name: "upvote_on_user", fields: [id_proposal], references: [id], onDelete: Cascade)

  id_user String
  upvote  Users  @relation(name: "upvote_on_user", fields: [id_user], references: [id], onDelete: Cascade)

  thumbs_up Boolean?

  @@id([id_proposal, id_user])
  @@map("_upvotes_on_users")
}

// -----------------------------------------------------------------------------
model DownvotesOnUsers {
  created_at DateTime @default(now())

  id_proposal String
  proposal    Proposals @relation(name: "downvote_on_user", fields: [id_proposal], references: [id], onDelete: Cascade)

  id_user String
  downvote  Users  @relation(name: "downvote_on_user", fields: [id_user], references: [id], onDelete: Cascade)

  thumbs_down Boolean?

  @@id([id_proposal, id_user])
  @@map("downvotes_on_users")
}

// -----------------------------------------------------------------------------
model Comments {
  id         String   @id
  created_at DateTime @default(now())

  message String
  shares  Int    @default(0)

  id_proposal String
  proposal    Proposals @relation(fields: [id_proposal], references: [id], onDelete: Cascade)
  id_user     String?
  user        Users?    @relation(name: "comment_creator", fields: [id_user], references: [id], onDelete: SetNull)

  response Responses[]
  like     CommentsOnUsers[] @relation(name: "comment_on_user")

  @@map("comments")
}

// -----------------------------------------------------------------------------
model Proposals {
  id         String   @id
  created_at DateTime @default(now())

  message         String
  shares          Int    @default(0)
  relevance_count Int   @default(0)

  comment Comments[]

  id_user String?
  user    Users?  @relation(name: "proposal_creator", fields: [id_user], references: [id], onDelete: SetNull)

  relevance RelevancesOnUsers[] @relation(name: "relevance_on_user")
  upvote    UpvotesOnUsers[]    @relation(name: "upvote_on_user")
  downvote    DownvotesOnUsers[]    @relation(name: "downvote_on_user")
  test TestsOnUsers[] @relation(name: "test_on_user")

  @@map("proposals")
}

// -----------------------------------------------------------------------------
model Responses {
  id         String   @id
  created_at DateTime @default(now())

  message String
  likes   Int    @default(0)
  shares  Int    @default(0)

  id_comment String
  comment    Comments @relation(fields: [id_comment], references: [id], onDelete: Cascade)
  id_user    String?
  user       Users?   @relation(fields: [id_user], references: [id], onDelete: SetNull)

  @@map("responses")
}

// -----------------------------------------------------------------------------
model Users {
  id         String   @id
  created_at DateTime @default(now())

  avatar String?
  email  String @unique
  name   String @unique

  comment  Comments[]  @relation(name: "comment_creator")
  proposal Proposals[] @relation(name: "proposal_creator")
  response Responses[]

  downvote    DownvotesOnUsers[]    @relation(name: "downvote_on_user")
  like      CommentsOnUsers[]   @relation(name: "comment_on_user")
  relevance RelevancesOnUsers[] @relation(name: "relevance_on_user")
  upvote    UpvotesOnUsers[]    @relation(name: "upvote_on_user")
  test TestsOnUsers[] @relation(name: "test_on_user")
  

  @@map("users")
}

// model Notifications {

// }
